var examples = {
    omni: "Machine({\n    id: 'example',\n    initial: 'leaf',\n    states: {\n      leaf: {\n        on: {\n          NEXT: 'compound'\n        }\n      },\n      'another leaf': {\n        entry: ['one', 'two'],\n        exit: ['three', 'four'],\n        on: {\n          NEXT: {\n            target: 'compound',\n            cond: function someCondition() { return true }\n          },\n          NEVER: {\n            target: 'leaf',\n            cond: function falseCondition() { return false }\n          }\n        }\n      },\n      compound: {\n        initial: 'child 1',\n        states: {\n          'child 1': {\n            on: {\n              NEXT: 'child 2'\n            }\n          },\n          'child 2': {\n            initial: 'subchild 1',\n            states: {\n              'subchild 1': {\n                on: { NEXT: 'subchild 2' }\n              },\n              'subchild 2': {\n                on: { NEXT: 'subchild 3', PREV: 'subchild 1' }\n              },\n              'subchild 3': {\n                type: 'final'\n              }\n            }\n          }\n        },\n        on: {\n          PREV: 'leaf',\n          NEXT: 'parallel',\n          INTERNAL: '.child 1'\n        }\n      },\n      parallel: {\n        type: 'parallel',\n        states: {\n          foo: {},\n          bar: {\n            initial: 'one',\n            states: {\n              one: {\n                on: {\n                  NEXT: 'two'\n                }\n              },\n              two: {\n                on: {\n                  NEXT: 'three',\n                  PREV: 'two'\n                }\n              },\n              three: {\n                on: {\n                  SELF: 'three',\n                  SELF_INTERNAL: '.',\n                  PREV: 'two',\n                  CYCLE: 'one'\n                }\n              }\n            }\n          },\n          baz: {\n            initial: 'one',\n            states: {\n              one: {\n                on: {\n                  TWO_CHILD: 'two.foo'\n                }\n              },\n              two: {\n                initial: 'foo',\n                states: {\n                  foo: {},\n                  bar: {},\n                  history: {\n                    type: 'history'\n                  }\n                }\n              },\n              three: {}\n            }\n          }\n        }\n      }\n    }\n  })",
    basic: "\n  // Available variables:\n  // - Machine\n  // - interpret\n  // - assign\n  // - send\n  // - sendParent\n  // - spawn\n  // - raise\n  // - actions\n  // - XState (all XState exports)\n  \n  const fetchMachine = Machine({\n    id: 'fetch',\n    initial: 'idle',\n    context: {\n      retries: 0\n    },\n    states: {\n      idle: {\n        on: {\n          FETCH: 'loading'\n        }\n      },\n      loading: {\n        on: {\n          RESOLVE: 'success',\n          REJECT: 'failure'\n        }\n      },\n      success: {\n        type: 'final'\n      },\n      failure: {\n        on: {\n          RETRY: {\n            target: 'loading',\n            actions: assign({\n              retries: (context, event) => context.retries + 1\n            })\n          }\n        }\n      }\n    }\n  });\n  "
};
export { examples };
